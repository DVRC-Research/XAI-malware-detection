import torchvision
from colorama import Fore, Style
import torch
from torch import device, nn
import torch.nn.functional as F


class DexRayModel(nn.Module):
    
    def __init__(self, img_size, dropout_rate=0.2):
        
        super(DexRayModel, self).__init__()
        self.img_size = img_size
        
        self.conv1 = nn.Conv1d(in_channels=1, out_channels=64, kernel_size=12)
        self.maxpool1 = nn.MaxPool1d(kernel_size=12)
        self.dropout1 = nn.Dropout(dropout_rate)
        self.conv2 = nn.Conv1d(in_channels=64, out_channels=128, kernel_size=12)
        self.maxpool2 = nn.MaxPool1d(kernel_size=12)
        self.dropout2 = nn.Dropout(dropout_rate)
        
        self.flatten = nn.Flatten() 
        
        # computing the output shape depending on img_size
        output_maxpool1 = ((img_size**2-12)+1) // 12
        output_maxpool2 = ((output_maxpool1-12)+1) // 12
        in_features = output_maxpool2 * 128 # out_channels = 128 (conv2)
                
        self.fc1 = nn.Linear(in_features=in_features, out_features=64) # in features = 14 336
        self.fc2 = nn.Linear(in_features=64, out_features=1)       
        

    def forward(self, x):
        
        x = x.unsqueeze(1)
        x = F.relu(self.conv1(x))
        x = self.maxpool1(x)
        x = self.dropout1(x)
        x = F.relu(self.conv2(x))
        x = self.maxpool2(x)
        x = self.dropout2(x)

        x = self.flatten(x)
        x = self.fc1(x)
        x = self.fc2(x)
        
        if x.size(0) != 1:
            x = x.squeeze() # only if batch size > 1 to avoid squeezing batch dimension
        
        return x


def create_dexray(device: device, img_size):
    model = DexRayModel(img_size)
    return model