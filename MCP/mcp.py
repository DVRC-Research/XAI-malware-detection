import numpy as np
from tqdm import tqdm
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt

# Import data
pos = np.loadtxt('MCP/umap_projection_tags_after_filtering.txt') # position 2D UMAP
col = np.loadtxt('MCP/umap_projection_histograms_after_filtering.txt') # color 1D UMAP

# Normalize color values between 0 and 100
col = 100 * (col - col.min()) / (col.max() - col.min())

MCP_depending_nb_neigh = []
nb_neigh = [5, 10, 50, 100, 1000] # nb of neighbors considered


for n in nb_neigh:

    knn = NearestNeighbors(n_neighbors=n, metric='euclidean')
    knn.fit(pos)

    clusters = knn.kneighbors(pos, return_distance=False)

    diff_colors = []

    for cluster in tqdm((clusters), desc=f"Computing MCP considering {n} neighbors"):
        current, neighbors =  cluster[0], cluster[1:]
        current_col = col[current]
        median_neigh_col = np.median([col[neigh] for neigh in neighbors])
        diff_colors.append(abs(current_col - median_neigh_col))

    MCP_depending_nb_neigh.append(np.median(diff_colors))


with open("MCP/MCP_values.txt", 'w') as f:
    f.write(f"[Nb neighbors : MCP]\n")
    for (n, mcp) in zip(nb_neigh, MCP_depending_nb_neigh):
        f.write(f"{n} : {mcp:.2f}\n")
        
        
print("\nResults can be found in MCP/MCP_values.txt")