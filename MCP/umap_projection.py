import os
import glob
import numpy as np
import pandas as pd
from PIL import Image
from tqdm import tqdm
from umap.umap_ import UMAP
from sklearn.cluster import DBSCAN


df = pd.read_csv("_dataset/apk_list_tags.csv", sep=';')


def get_distribution_pixel_values(img):
    
    img_array = np.array(img)
    total_pixels = img_array.size
    occurences = [0 for _ in range(256)]
    for pixel_value in img_array.flatten():
        occurences[pixel_value] += 1
    occurences = [o / total_pixels for o in occurences]
    return occurences


# Get the list of APK images
apk_images = glob.glob("_resized_img_128/*/*/*.png", recursive=True)

# Create a dictionary to store the distribution for each APK
apk_distributions = {}

for apk_image in tqdm(apk_images, desc="Constructing all histograms..."):
    
    with Image.open(apk_image) as img:
        # Get the distribution of pixel values
        distribution = get_distribution_pixel_values(img)
        
        # Get the hash of the APK from the image file name
        apk_hash = os.path.basename(apk_image).split('.')[0]
        
        # Store the distribution in the dictionary, using the hash as the key
        apk_distributions[apk_hash] = distribution

# Convert the dictionary to a DataFrame
distribution_df = pd.DataFrame.from_dict(apk_distributions, orient='index')

# Rename the columns of the histograms dataframes to be more descriptive
distribution_df.columns = [f'histogram_{i}' for i in range(256)]

# Remove the mean for each histogram
distribution_df = distribution_df.sub(distribution_df.mean(axis=1), axis=0)

# Merge the distribution DataFrame with the original DataFrame
df_merged = pd.merge(df, distribution_df, left_on='hash', right_index=True)

# Drop entries where 'num_antivirus_malicious' is between 1 and 5
df_merged = df_merged[~df_merged['num_antivirus_malicious'].between(1, 5)]

# Drop non-numeric and non-informative columns for the UMAP projection
df_drop = df_merged.drop(['first_submission_date', 'suggested_threat_label'], axis=1)

# Create a list of column names as strings
column_names_histogram = [f'histogram_{i}' for i in range(256)]



histograms = df_drop[column_names_histogram]
tags = df_drop.drop(['hash', 'num_antivirus_malicious'], axis=1)


# Initialize and fit UMAP for histograms (1D)
print("Projecting the tags into a 1-dimensional space...")
umap_model_histograms = UMAP(n_neighbors=50, min_dist=0, n_components=1, random_state=42, n_epochs=200)
umap_projection_histograms = umap_model_histograms.fit_transform(histograms)

# Initialize and fit UMAP for tags (2D)
print("Projecting the histograms into a 2-dimensional space...")
umap_model_tags = UMAP(n_neighbors=50, min_dist=0, n_components=2, random_state=42, n_epochs=200)
umap_projection_tags = umap_model_tags.fit_transform(tags)

# Convert the projections into a DataFrame for visualization
proj_df = pd.DataFrame(umap_projection_tags, columns=['Component 1', 'Component 2'])
proj_df['Color Gradient'] = umap_projection_histograms
proj_df['Hash'] = df_drop['hash'].values  # Ensure the hash values are copied directly

# Save projections
np.savetxt("MCP/umap_projection_histograms_before_filtering.txt", proj_df['Color Gradient'])
np.savetxt("MCP/umap_projection_tags_before_filtering.txt", proj_df[['Component 1', 'Component 2']])




# Filter APKs to ignore potential repackaged ones

# Apply DBSCAN to the UMAP projection
epsilon = 0.001
dbscan = DBSCAN(eps=epsilon, min_samples=2)
clusters = dbscan.fit_predict(proj_df[['Component 1', 'Component 2']])

# Add the labels to the DataFrame
proj_df['Cluster'] = clusters
filtered_df = proj_df[proj_df['Cluster'] == -1]

# Save projections
np.savetxt("MCP/umap_projection_histograms_after_filtering.txt", filtered_df['Color Gradient'])
np.savetxt("MCP/umap_projection_tags_after_filtering.txt", filtered_df[['Component 1', 'Component 2']])