import os
import math
import argparse
import numpy as np
from PIL import Image
from pathlib import Path
from androguard.core.bytecodes.apk import APK
import logging
androguard_logger = logging.getLogger('androguard')
androguard_logger.setLevel(logging.CRITICAL)

IMAGES_PATH = Path("pixel_to_code/_original_images")
SALIENCIES_PATH = Path("pixel_to_code/_saliency_maps")
SAVE_PATH = Path("pixel_to_code/salient_dex_code")
APKS_PATH = Path("pixel_to_code/_apks")
IMAGE_SIZE = 128**2


parser = argparse.ArgumentParser(
    description="Script to save salient portion of code",
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
)
parser.add_argument("-e", "--experiment_name", help="name of the experiment")
parser.add_argument("-n", "--number_pixels", type=int, help="number of salient pixels to consider")
args = parser.parse_args()    


apks_path = Path(APKS_PATH, args.experiment_name)


def most_salient_pixels(saliency_path, number=1):
    """
    Inputs :
        saliency_path : path to the saliency map
        number : length of the array to be returned (default:1)

    Outputs :
        maximum : array containing the indexes of the most salient pixels
    """

    with Image.open(saliency_path) as sal:
        sal_array = np.array(sal).flatten()
        maximums = np.argsort(sal_array)[::-1][:number]
        return maximums
    


def get_salience_pixel(saliency_path, pos):
    """
    Get the salience of a pixel in the saliency map from its position
    """

    with Image.open(saliency_path) as sal:
        sal_array = np.array(sal).flatten()
        return sal_array[pos]
    

def get_code_interval(len_code, len_img, pos):
    """
    Inputs :
        len_code : length of the dex files
        len_img : length of the image created (in our case 128**2)
        pos : index of a pixel in the image (typically the index of a pixel highlighted by the corresponding saliency map)
    
    Outputs :
        lower_bound, upper_bound : boundaries of the portion of code (in the dex) corresponding the pixel (in the image created)
    """

    ratio = len_code / len_img
    center = pos * ratio + (ratio - 1) / 2

    lower_bound = center - (ratio - 1)
    upper_bound = center + (ratio - 1)

    if ratio < 1:
        copy_min = lower_bound
        lower_bound = upper_bound
        upper_bound = copy_min

    # ensure that we stay within the code length
    lower_bound = max(0, math.floor(lower_bound))
    upper_bound = min(math.ceil(upper_bound), len_code-1)

    return (lower_bound, upper_bound)



def get_dex_files(apk):
    dex_files = []
    for f in apk.get_files():
        if f.endswith(".dex"):
            dex_files.append(f)
    return dex_files

def read_apk(apk_path):
    
    apk = APK(apk_path)
    stream = bytes()

    dex_files = get_dex_files(apk)

    for i, dex_file in enumerate(dex_files):
        dex_bytes = apk.get_file(dex_file)
        stream += dex_bytes

    return stream


salient_code_over_all_apks = {}

for apk_file in apks_path.glob('*.apk'):
    
    salient_portions = {}
    
    # get the content of the .dex files
    stream = read_apk(apk_file)
    len_code = len(stream)
    
    # get the paths to the original image and the saliency map
    apk_hash = apk_file.stem
    img_path = IMAGES_PATH / args.experiment_name / "*" / f"{apk_hash}.png"
    saliency_path = SALIENCIES_PATH / args.experiment_name / f"Saliency_{apk_hash}.png"
    
    # indexes of the n most salient pixels
    maximums = most_salient_pixels(saliency_path, args.number_pixels)
    
    for i, maximum in enumerate(maximums):
        
        # value associated in the saliency map (0-255)
        value_of_maximum = get_salience_pixel(saliency_path, maximum)

        # indexes in the code
        lower_bound, upper_bound = get_code_interval(len_code, IMAGE_SIZE, maximum)

        # portion of code corresponding to the pixel studied
        portion_to_study = stream[lower_bound:upper_bound].hex()
        readable_portion = ' '.join([portion_to_study[i:i+2] for i in range(0, len(portion_to_study), 2)])
        
        salient_portions[i+1] = readable_portion
        
    salient_code_over_all_apks[apk_hash] = salient_portions
    
    
file_path = Path(f"pixel_to_code/salient_code/{args.experiment_name}.txt")    
file_path.parent.mkdir(parents=True, exist_ok=True)

with file_path.open('w') as f:
    for apk_hash, results in salient_code_over_all_apks.items():
        f.write(f"APK's hash : {apk_hash}\n\n")
        for top, portion_code in results.items():
            f.write(f"{top})\n")
            f.write(f"{portion_code}\n\n")
        f.write("\n\n\n")