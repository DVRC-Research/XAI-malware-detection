"""
Input : apk hash
Output : path to .png corresponding to given hash

Called from copy_image.sh
"""

import argparse
import pandas as pd
import os
from pathlib import Path
from datetime import datetime


def main():

    parser = argparse.ArgumentParser(
        description="Script to find the path to the img of an apk",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument("-apk", "--apk_hash", help="hash of the apk")
    args = parser.parse_args()
    
      
    # Load dataset csv
    PATH_DATASET_CSV = "_dataset/apk_list_tags.csv"
    df = pd.read_csv(PATH_DATASET_CSV, sep=";")
    

    # Convert submission date into datetime objects
    date_format = '%d/%m/%Y'
    df['date'] = df["first_submission_date"].apply(lambda x: datetime.strptime(x.split()[0], date_format))
    df.drop("first_submission_date", axis=1, inplace=True)
    

    # Extract date and VTD count for the given hash
    apk_data = df[df['hash'] == args.apk_hash]
    if apk_data.empty:
        raise ValueError(f"No data found for APK with hash {args.apk_hash}")
        
    vtd_count = apk_data['num_antivirus_malicious'].values[0]
    date = apk_data['date']
    year = date.dt.year.values[0]
    month = date.dt.month.values[0]
    
    category = "Malware" if vtd_count >= 6 else "Goodware" if vtd_count == 0 else "Undefined"
    
    
    if category != "Undefined":
        base_path = Path("_resized_img_128")
        train_or_test = "train" if (year < 2023) or (year == 2023 and month <= 6) else "test"
        image_path = base_path / train_or_test / category / f"{args.apk_hash}.png"
        print(image_path)
    

main()