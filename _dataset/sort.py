import argparse
import glob
import os
import shutil
from pathlib import Path
from tqdm import tqdm
import pandas as pd

# Define default paths
DEFAULT_UNSORTED_DATASET_FOLDER = "_dataset/unsorted_dataset"
DEFAULT_SORTED_DATASET_FOLDER = "_dataset/sorted_dataset"
DEFAULT_CSV_PATH = "_dataset/apk_list_tags.csv"

# Define train and test periods
DEFAULT_START_TRAIN_YEAR = 2022
DEFAULT_END_TRAIN_YEAR = 2023
DEFAULT_START_TRAIN_MONTH = 1
DEFAULT_END_TRAIN_MONTH = 6
DEFAULT_START_TEST_YEAR = 2023
DEFAULT_END_TEST_YEAR = 2023
DEFAULT_START_TEST_MONTH = 7
DEFAULT_END_TEST_MONTH = 12


def import_args():
    parser = argparse.ArgumentParser(description="Split dataset into train/test and sort by VTD")
    parser.add_argument("--unsorted_dataset", type=str, default=DEFAULT_UNSORTED_DATASET_FOLDER, help="The root directory of the unsorted dataset.")
    parser.add_argument("--sorted_dataset", type=str, default=DEFAULT_SORTED_DATASET_FOLDER, help="The root directory of the sorted dataset.")
    parser.add_argument("--csv", type=str, default=DEFAULT_CSV_PATH, help="Path to the metadata CSV file.")
    parser.add_argument("--start_train_year", type=int, default=DEFAULT_START_TRAIN_YEAR, help="The starting year of the training date range.")
    parser.add_argument("--end_train_year", type=int, default=DEFAULT_END_TRAIN_YEAR, help="The ending year of the training date range.")
    parser.add_argument("--start_train_month", type=int, default=DEFAULT_START_TRAIN_MONTH, help="The starting month of the training date range.")
    parser.add_argument("--end_train_month", type=int, default=DEFAULT_END_TRAIN_MONTH, help="The ending month of the training date range.")
    parser.add_argument("--start_test_year", type=int, default=DEFAULT_START_TEST_YEAR, help="The starting year of the testing date range.")
    parser.add_argument("--end_test_year", type=int, default=DEFAULT_END_TEST_YEAR, help="The ending year of the testing date range.")
    parser.add_argument("--start_test_month", type=int, default=DEFAULT_START_TEST_MONTH, help="The starting month of the testing date range.")
    parser.add_argument("--end_test_month", type=int, default=DEFAULT_END_TEST_MONTH, help="The ending month of the testing date range.")
    return parser.parse_args()


def read_metadata(csv_path):
    data = pd.read_csv(csv_path, sep=';')
    data['first_submission_date'] = pd.to_datetime(
        data['first_submission_date'].apply(lambda x:x.split()[0]), # remove hours:min
        format='%d/%m/%Y')
    return data


if __name__ == "__main__":
    args = import_args()
    dataset_path = Path(args.unsorted_dataset)
    sorted_dataset_path = Path(args.sorted_dataset)
    metadata = read_metadata(args.csv)

    train_start = pd.Timestamp(year=args.start_train_year, month=args.start_train_month, day=1)
    train_end = pd.Timestamp(year=args.end_train_year, month=args.end_train_month, day=1) + pd.offsets.MonthEnd()
    test_start = pd.Timestamp(year=args.start_test_year, month=args.start_test_month, day=1)
    test_end = pd.Timestamp(year=args.end_test_year, month=args.end_test_month, day=1) + pd.offsets.MonthEnd()

    # Splitting metadata into train and test based on date
    train_metadata = metadata[(metadata['first_submission_date'] >= train_start) & (metadata['first_submission_date'] <= train_end)]
    test_metadata = metadata[(metadata['first_submission_date'] >= test_start) & (metadata['first_submission_date'] <= test_end)]

    # Remove old train and test folders if they exist
    for subset in ["train", "test"]:
        if os.path.exists(sorted_dataset_path / subset):
            shutil.rmtree(sorted_dataset_path / subset)

        
    def organize_dataset(metadata_df, subset):
        
        for _, row in tqdm(metadata_df.iterrows(), total=metadata_df.shape[0], desc=f"Organizing {subset} dataset"):
            
            num_detections = row['num_antivirus_malicious']
            apk_name = f"{row['hash']}.apk"
            source_apk_path = dataset_path / apk_name
            
            if num_detections >= 6:
                category = "Malware"
            elif num_detections == 0:
                category = "Goodware"
            else:
                continue

            target_folder = sorted_dataset_path / subset / category
            target_apk_path = target_folder / apk_name

            if not source_apk_path.exists() or target_apk_path.exists():
                continue  # Skip if source APK doesn't exist or if target apk already exists
                
            os.makedirs(target_folder, exist_ok=True)
            shutil.move(source_apk_path, target_apk_path)

    organize_dataset(train_metadata, "train")
    organize_dataset(test_metadata, "test")

    print("Dataset sorting complete.")
